/**********************************************************************************************************************
 * Pseudocode for homework 3 of Data Structures with Java with Professor Berry
 *
 * @author mlewis
 * @version November 24, 2019
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * A Map is an object that maps keys to values. A map cannot contain duplicate keys and each key can map to at most one
 * value.
 *
 * @author mlewis
 * @version Nov 24, 2019
 *********************************************************************************************************************/

public interface Map {

     String get(int k);

     void put(int k, String v);

     boolean contains(int k);

     void delete(int k);

     void printHash();
}

/**********************************************************************************************************************
 * A Hash Table provides a mechanism by which you can create indexed tables in which the index is a value other than a
 * string. The Hash Table implements a Map interface.
 *
 * @author mlewis
 * @version Nov 24, 2019
 *********************************************************************************************************************/

 public class HashTable implements Map {

    private int size;
    private int[] keys;
    private String[] data;
    private boolean[] hasBeenUsed;

    /**
    * public HashTable()
    * Initialize an empty HashTable with an initial capacity of 103, which is a twin prime.
    * @postcondition
    *  An empty HashTable with an initial capacity of 103 has been initialized.
    * @exception OutOfMemoryError
    *  Indicates insufficient memory for this HashTable
    */
    public HashTable() {
        INIT size = 0
        INIT keys = new int[103];
        INIT data = new String[103];
        INIT hasBeenUsed = new String[103];
    }

    /**
    * public HashTable(int capacity)
    * Initialize a HashTable with the given initial capacity.
    * @param capacity
    *  The initial capacity of the HashTable.
    * @postcondition
    *  A HashTable with an initial capacity has been initialized.
    * @exception OutOfMemoryError
    *  Indicates insufficient memory for this HashTable
    */
    public HashTable(int capacity) {
        IF capacity is less than 0
            THROW invalid argument exception
        INIT size = 0
        INIT keys = new int[capacity];
        INIT data = new String[capacity];
        INIT hasBeenUsed = new String[capacity];
    }
 }
