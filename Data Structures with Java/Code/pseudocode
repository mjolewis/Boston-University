/**********************************************************************************************************************
 * Pseudocode for homework 2 of Data Structures with Java with Professor Berry
 *
 * @note
 *   1. Pseudocode for the 8 queens problem
 *
 * @author mlewis
 * @version Oct 8, 2019
 *********************************************************************************************************************/

 /**
 * An interface for a stack based data structure. A stack is a Last-In-First-Out (LIFO) data structure. To access an
 * item other than the top item, you must first remove every item that comes before it in the stack.
 public interface Stack<E> {
    boolean isEmpty();
    boolean clear();
    E peek();
    E pop();
    E push(E item);
    int search(Object obj);
 }

/**********************************************************************************************************************
 * A LinkedStack is a stack of generic types. The stack can have a special "current element", which is the top element
 * in the stack.
 *
 * @note
 *   1. A stack has no size limitations (other than Integer.MAX_VALUE nodes) so will never need to guarantee capacity.
 *
 * @author mlewis
 * @version Oct 8, 2019
 *********************************************************************************************************************/
 public class LinkedStack<E> implements Stack<E> {
    // Invariant of the LinkedStack<E> class.
    //  1. The instance variable top is the head reference in the stack.
    //  2. For the final node in the stack, the next reference is null. Otherwise, the next reference is a reference
    //     to the next node.
    //  3. The stack is a Last-In-First-Out data structure. To access an item other than the first item, you must first
    //     remove every node that sits on top of the target item in the stack.
    //  4. The instance variable size is the number of objects in the stack.
    private int size;
    private Node<E> top;

    /**
    * Initializes an empty stack. Note that the initial top node is null indicating that the stack is empty.
    * @postcondition
    *  This new stack is empty with a null reference in the top node.
    * @exception OutOfMemoryError
    *  Indicates insufficient memory for the new stack.
    */
    private LinkedStack() {
        SET size equal to zero
        SET top equal to null
    }

    /**
    * Initializes an empty stack. Note that the initial top node is null indicating that the stack is empty.
    * @postcondition
    *  This new stack is empty with a null reference in the top node.
    * @exception OutOfMemoryError
    *  Indicates insufficient memory for the new stack.
    */
    public getInstance() {
        INIT LinkedStack();
    }

    /**
    * Modification method to remove all objects from the stack.
    * @return boolean
    *  Return true if the stack was emptied. Otherwise return false.
    * @postcondition
    *  The stack is now empty and every object (if there any) in the stack is available for garbage collection.
    /*
    public boolean clear() {
        SET top = new Node<E>;
        SET size = 0;
    }

    /**
    * Accessor method to determine if the stack is empty.
    * @return boolean
    *  Returns true if the stack is empty. Otherwise returns false.
    */
    public boolean isEmpty() {
        return size == 0;
    }

    /**
    * Accessor method to look at the object on the top of the stack.
    * @return E
    *  The top object on the stack.
    * @postcondition
    *  The stack is not modified in any way. The top element remains the top of the stack.
    */
    public E peek() {
        IF (size == 0) {
            return null;
        }
        END IF

        GET top.data();
    }

    /**
    * Modification method that retrieves the top object from the stack. The next object (if there is one) is now the
    * new top.
    * @return E
    *  The top object from the stack
    * @postcondition
    *  The top object was removed from the stack and the next object (if there was one) is the new top. Otherwise, the
    *  new top is a null reference. The size of the stack has decreased by one.
    */
    public E pop() {
        INIT E answer;

        IF (size == 0) {
            return null;
        }
        END IF

        SET answer = top.data();
        SET top = top.getNext();
        DECREMENT size--;
        RETURN answer;
    }

    /**
    * Modification method that adds a new object to the top of the stack.
    * @param item
    *  The item being pushed onto the stack.
    * @return E
    *  The item being pushed onto the stack
    * @postcondition
    *  The item is the new top and the size of the stack has increased by one.
    */
    public E push(E item) {
        SET top = new Node(item, top);
        INCREMENT size++;
        RETURN item;
    }

    /**
    * Accessor method that returns the 1-based position of an object on the stack (if the object is on the stack). If
    * the object is not on the stack, the method returns -1.
    * @param obj
    *  The object to search for on the stack.
    * @return int
    *  The 1-based position of the object if it is on the stack. If it is not on the stack, return -1.
    * @postcondition
    *  The stack remains unchanged.
    */
    public int search(Object obj) {
        INIT count;
        INIT Node<E> current;

        SET current = top;
        SET count = 1 // 1-based index
        FOR (every node in the stack) {
             IF (current equals obj) {
                RETURN count;
             }
             END IF
             INCREMENT count++;
        }
        RETURN -1;
    }

    /**
    * Compare this Node to another object for equality
    * @param item
    *  An object with which this Node is being compared.
    * @return boolean
    *  A return value of true indicates that obj refers to a Node object with the same value as this Node. Otherwise,
    *  the return value is false.
    */
    public boolean equals(Object obj) {
        IF (object is an instance of Node<E>) {
            SET obj equal to a Node<E> variable via a shortening typecast
            RETURN (candidate.data == top.data);
        }
        ELSE {
            RETURN false;
        }
        END IF
    }
 }


