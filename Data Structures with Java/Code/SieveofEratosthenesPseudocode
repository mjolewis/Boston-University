/**********************************************************************************************************************
 * Pseudocode for programming project 2 of Data Structures with Java with Professor Berry
 *
 * @note
 *   1. Pseudocode for the Sieve of Eratosthenes
 *
 * @author mlewis
 * @version Nov 8, 2019
 *********************************************************************************************************************/

/*********************************************************************************************************************
* A user input class builds a GUI with a text input field and a return button. This class implements the
* ActionListener interface.
*
* @author mlewis
* @version Nov 8, 2019
*********************************************************************************************************************/

public class BuildGUI implements ActionListener {
    // Invariant of the UserInput.java class.
    //  1. The instance variable userInput stores the value entered by the user.
    int userInput;

    /**
    * public void constructGUI()
    * Constructs a GUI
    * @postcondition
    *  A GUID has been constructed.
    * @exception OutOfMemoryError
    *  Indicates insufficient memory for this GUI
    public void constructGUI() {
        INIT GUI frame
        INIT GUI panel
        INIT GUI button
        INIT GUI text field

        ADD ActionListener to button
        ADD panel to frame
        ADD button to frame

        SET frame size
        SET frame to visible
    }

    /**
    * private void actionPerformed(ActionEvent e)
    * Helper method that captures the users input.
    * @param e
    *  An action event listener object.
    * @postcondition
    *  The user has pressed the submit button and the input has been stored in the instance variable userInput. The
    *  test field has been cleared and focus has been restored to the text field.
    */
    private void actionPerformed(ActionEvent e) {
        SET userInput variable to text submitted by user
        CLEAR text field
        SET focus back to empty text field
    }
}

/**********************************************************************************************************************
* A calculate primes class uses the Sieve of Eratosthenes to calculate all the prime numbers up to some integer n. The
* technique was developed by a Greek mathematician and poet Eratosthenes who lived in the third century BC and it is
* implemented with an array-based queue.
*
* @note
*  1) Beyond Integer.MAX_VALUE elements, the array-based queue won't work properly.
*
* @author mlewis
* @version Nov 9, 2019
**********************************************************************************************************************/

public class CalculatePrimes {
    // Invariant of the CalculatePrimes class.
    //  1. The instance variable numbers is an array-based queue that has been initialized with consecutive integers 2
    //     through n inclusive if the value of n is greater than START_VALUE (+) MINIMUM_SIZE. Otherwise, the
    //     array-based queue has been initialized with 10 elements starting with the START_VALUE.
    //  2. The instance variable primes is an array-based queue that stores all the prime numbers calculated by the
    //     Sieve of Eratosthenes algorithm.
    //  3. The instance variable START_VALUE is the first element in the numbers array.
    //  4. The instance variable MINIMUM_SIZE guarantees the minimum size of the numbers array.
    private int[] numbers;
    private int[] primes;
    private int maxNumber;
    private static final int START_VALUE = 2;
    private static final int MINIMUM_SIZE = 10;

    /**
    * public CalculatePrimes()
    * Default constructor that initializes the numbers queue with 10 elements.
    * @postcondition
    *  The numbers queue has been initialized with 10 elements.
    * @exception OutOfMemoryError
    *  Indicates insufficient memory for this queue.
    */
    public CalculatePrimes() {
        INIT numbers array to minimum number of elements.
        INIT primes array to minimum number of elements.
    }

    /**
    * public CalculatePrimes(int maxNumber)
    * Overloaded constructor that initializes the numbers queue with consecutive integers 2 through n inclusive.
    * @postcondition
    *  The numbers queue has been initialized with consecutive integers 2 through n inclusive.
    * @exception OutOfMemoryError
    *  Indicates insufficient memory for this queue.
    */
    public CalculatePrimes(int maxNumber) {
        INIT default constructor
        INIT maxNumber to maxNumber
    }
}

