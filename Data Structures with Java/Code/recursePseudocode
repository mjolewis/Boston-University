/**********************************************************************************************************************
 * Pseudocode for homework 2 of Data Structures with Java with Professor Berry
 *
 * @note
 *   1. Pseudocode for the recurse homework set
 *
 * @author mlewis
 * @version Nov 7, 2019
 *********************************************************************************************************************/

 public class Recurse {
    // Invariant of the Recurse.java class.
    //  1. The instance variable depth indicates the number of recursive activations before the base case is reached.
    private int depth;

    /**
    * public Recurse()
    * Initialize a Recurse object with a depth of 4
    * @postcondition
    *  An Recurse object with a depth of 4 has been initialized.
    */
    public Recurse() {
        depth = 4
    }

    /**
    * public Recurse(int depth)
    * Initialize a Recurse object with a depth initialized to the given argument
    * @precondition
    *  The argument is greater than or equal to zero. Otherwise, the depth is initialized to 4.
    * @postcondition
    *  An Recurse object has been initialized with a depth equal to the given argument.
    */
    public Recurse(int depth) {
        if (depth < 0) {
            this();
        }
        this.depth = depth;
    }

    /**
    * public int getDepth()
    * Accessor method that returns the depth of recursion.
    * @return int
    *  The depth of recursion.
    */
    public int getDepth() {
        return depth;
    }

    /**
    * public void printRecursivePattern(int start, int end)
    * A series of asterisks have been written to the terminal using System.out.println(). The first line contains one
    * asterisk, the next line contains 2, and so on, up to the nth line, which contains n asterisks. Line n+1 and n+2
    * contain n asterisks. The next line has n-1 asterisks, and so on until line number 2n+1 which has one asterisk.
    * @param start
    *  The lower end of a range that goes from start to end.
    * @param end
    *  The higher end of a range that goes from start to end.
    * @precondition
    *  The start and end are greater than or equal to zero with end being greater than start
    * @postcondition
    *  A series of asterisks have been written to the terminal using System.out.println().
    */
    public void printRecursivePattern(int start, int end) {
        if (start == end) {
            System.out.println("*".repeat(end));
        }
        System.out.println("*".repeat(start));
        return printRecursivePattern(start + 1, end);
        System.out.println("*".repeat(start);
    }

    /**
    * public void setDepth(int depth)
    * Mutator method to change the depth of recursion.
    * @precondition
    *  The depth is greater than or equal to zero.
    * @postcodition
    *  The depth of recursion has been set to the given argument.
    */
    public void setDepth(int depth) {
        this.depth = depth;
    }
 }